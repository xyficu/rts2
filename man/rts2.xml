<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [

  <!ENTITY dhfirstname "<firstname>Petr</firstname>">
  <!ENTITY dhsurname   "<surname>Kubanek</surname>">
  <!ENTITY dhdate      "<date>2012-06-12</date>">
  <!ENTITY dhsection   "<manvolnum>7</manvolnum>">
  <!ENTITY dhemail     "<email>petr@kubanek.net</email>">
  <!ENTITY dhusername  "Petr Kubanek">
  <!ENTITY dhpackage   "rts2">

  <!ENTITY % rts2 SYSTEM "rts2.ent">
  %rts2;
]>

<refentry>
  <refentryinfo>
    <title>&dhpackage;</title>
    <productname>rts2</productname>
    <productnumber>&rts2version;</productnumber>
    &dhdate;
    <authorgroup>
      <author>
        &dhfirstname;
        &dhsurname;
	<contrib>Main RTS2 author.</contrib>
	<address>
	  &dhemail;
	</address>
      </author>
      <author>
        <firstname>Markus</firstname>
	<surname>Wildi</surname>
	<contrib>Provides astrometry.net based astrometry, focusing routines and some drivers.</contrib>
      </author>
      <author>
        <firstname>Martin</firstname>
	<surname>Jelinek</surname>
	<contrib>Contributed with ideas, bug-fixes, gnuplotting commands. And do most of the image analysis.</contrib>
      </author>
      <author>
        <firstname>Stanislav</firstname>
	<surname>Vitek</surname>
	<contrib>Image processing, some focus deamons, web integration.</contrib>
      </author>
      <author>
        <firstname>John</firstname>
	<surname>French</surname>
	<contrib>Watcher dome controller.</contrib>
      </author>
      <author>
        <firstname>Ronan</firstname>
	<surname>Cunniffe</surname>
	<contrib>Changes to camd logic to support Andor CCDs, and to support fast-readout cameras.</contrib>
      </author>
      <author>
        <firstname>Michal</firstname>
	<surname>Prouza</surname>
	<contrib>Help with manual pages, and a lot from LSST development.</contrib>
      </author>
      <author>
        <surname>and many others</surname>
	<contrib>ideas, bug-fixing, small changes.</contrib>
      </author>
    </authorgroup>
    <copyright>
      <year>2006</year>
      <year>2007</year>
      <year>2008</year>
      <year>2009</year>
      <year>2010</year>
      <holder>&dhusername;</holder>
    </copyright>
    <copyright>
      <year>2011</year>
      <holder>&fzu;</holder>
    </copyright>
    &legal;
  </refentryinfo>
  <refmeta>
    <refentrytitle>&dhpackage;</refentrytitle>
    &dhsection;
  </refmeta>
  <refnamediv>
    <refname>&dhpackage;</refname>

    <refpurpose>Description for Remote Telescope System, 2nd version</refpurpose>
  </refnamediv>
  <refsect1>
    <title>ABOUT</title>

    <para>
      RTS2, or Remote Telescope System, 2nd Version, is an integrated package
      for remote telescope control under the Linux operating system. It is
      designed to run in fully autonomous mode, picking targets from a database
      table, storing image meta data to the database, processing images and
      storing their WCS coordinates in the database and offering
      Virtual-Observatory enabled access to them. It is currently running on
      various telescope setups world-wide. For control of devices from various
      manufacturers RTS2 has an abstract device layer, enabling control of all
      possible combinations of mounts, CCDs, photometers, roof and cupola
      controllers.
    </para>
  </refsect1>
  <refsect1>
    <title>RTS2 COMPONENTS</title>

    <para>
      RTS2 consists of four basic types of components:
    </para>
    <variablelist> 
      <varlistentry>
        <term>
	  <option>CENTRALD</option>
	</term>
        <listitem>
          <para>
	    The name resolver and observatory housekeeper - this executable
	    enables the finding of devices in the observatory setup and keeps
	    track of the observatory state, e.g. whether observatory is in 
	    off, standby or on state, and if it is day or night.
	  </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>DEVICES</option>
	</term>
	<listitem>
          <para>
	     One executable serving one device. They share common code for
	     processing of TCP/IP commands (and registering to centrald), and
	     implement the HW interacting layer (either through their own code
	     or through some library). Those include daemons to drive cameras,
	     mounts, roofs etc.
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>  
	  <option>SERVICES</option>
	</term>
       	<listitem>
          <para>
	     They interact with the database and either select the next target
	     (rts2-selector), execute an observation (rts2-executor), process
	     images (rts2-imgproc), or wait and process a GCN or other incoming
	     messages (rts2-grbd and rts2-auger-shooter).
          </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>MONITORING PROGRAMS</option>
	</term>
	<listitem>
          <para>
	     ncurses (3ncurses) based rts2-mon, console based rts2-cmon, X-Window image
	     grabber rts2-xfocusc, console grabber rts2-focusc, and
	     rts2-xmlrpcclient, which enables access to the RTS2 system through
	     the XML/RPC.
          </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>IMAGE PROCESSING STATES</title>

    <para>
      During image processing, various image kind are created. Depending on processing
      script configuration, following image kinds can be created:
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <option>RA</option>
	</term>
	<listitem>
	  <para>
	    RAW images.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <option>DF</option>
	</term>
	<listitem>
	  <para>
	    RAW image, corrected by dark frame.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <option>FF</option>
	</term>
	<listitem>
	  <para>
	    RAW image, corrected by dark frame and flat frame.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <option>PR</option>
	</term>
	<listitem>
	  <para>
	    Processed image - image with astrometry etc..
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>RTS2 STATES</title>

    <refsect2>
      <title>OFF</title>
      <para>
        This is safe state from roof point of view. In OFF state,
	system will never try to observe, will not open the dome. It
	might interact with some devices in putting them to safe state
	(e.g. park the mount).
      </para>
      <para>
        OFF state is your choice when you know that system will not
	observe, e.g. when some components are broken. OFF state is
	also your choice in case of bad weather - in OFF state, system
	make sure dome will remain closed.
      </para>
    </refsect2>
    <refsect2>
      <title>STANDBY</title>
      <para>
        Standby state is between on and off state. In this state,
	cameras are cooled, and telescope is prepared for observation.
	But no observation is performed, and dome remain closed, so
	telescope is protected from the elements.
      </para>
      <para>
        When running with meteo station, meteo station can trigger
	change of state from on to standby in case of bad weather, and
	from standby to on when weather is good. !!STANDBY STATE DOES
	NOT GUARANTEE THAT DOME WILL REMAIN CLOSED!! When you need to
	be sure that dome remain closed, please use off state.
      </para>
    </refsect2>
    <refsect2>
      <title>ON</title>
      <para>
        Dome is opened at evening and closed at morning, observations
	are performed. That is main operating stat of the system.
      </para>
    </refsect2>

    <para>
      ON and STANDBY states can have following substates. They are changed
      during day by rts2-centrald (1).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <option>day</option>
	</term>
	<listitem>
	  <para>
	    During day, observatory is in idle state. CCDs are not cooled.
	    Imgproc might run image and observation processing from last night.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <option>evening</option>
	</term>
	<listitem>
	  <para>
	    CCDs are cooled during evening. Light intensiti is still too high
	    to take images, and cameras are not cooled to take dark images.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <option>dusk</option>
	</term>
	<listitem>
	  <para>
	    Cooled CCDs are used to take flat frames.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <option>night</option>
	</term>
	<listitem>
	  <para>
	    Observations are performed out during night.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <option>dawn</option>
	</term>
	<listitem>
	  <para>
	    Similar to dusk. Flat frames and darks are taken.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <option>morning</option>
	</term>
	<listitem>
	  <para>
	    CCDs are tempered to ambient temperature.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </refsect1>
  <refsect1>
    <title>Time parameters input format</title>
    &localtime;
  </refsect1>
  <refsect1>
    <title>IMAGE PATH EXPRESSION</title>
    <para>
      Image path expression is processed before it is used. This sectio0n
      describes rules how image name can be formed. 
    </para>

    <para>
      The path are formed from C printf-like expression. The important
      characters are % and @, which allows substitution of path values.
    </para>

    <para>
      You can try various substitution patterns using
      <citerefentry><refentrytitle>rts2-image</refentrytitle><manvolnum>1</manvolnum></citerefentry>
      tool.
    </para>

    <refsect2>
      <title>Example of the image path expression</title>
      <para>
	The next example works with the FITS file taken (based on RTS2 CTIME and
	USEC) on 2006-10-17 at 18:22:03.447s, with R filter (RTS2 FILTER
	keyword). Here we list few path expresions together with expected
	values.
      </para>
      <variablelist>
        <varlistentry>
	  <term>
	    <option>@DATE-OBS/%F/%04i/%f</option>
	  </term>
  	  <listitem>
	    <para>
	      2006-10-17T18:22:03.447/R/0001/20061017182203-0447.fits, if DATE-OBS keyword is filled and image ID is 1.
	    </para>
	    <para>
	      @DATE-OBS/R/0001/20061017182203-0447.fits, if DATE-OBS keyword cannot be found.
	    </para>
	  </listitem>
	</varlistentry>
        <varlistentry>
	  <term>
	    <option>%N%2F</option>
	  </term>
  	  <listitem>
	    <para>
	      20061017 R
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>
    <para>
      Substrings begining with @ are escaped to keyword value with name equal
      to value characters and number only string which follows. If this value
      is not found in header, string @[name] will be put to path, where [name]
      is string after @.
    </para>
    <para>
      For example, string @DATE-OBS will be expanded to keyword value of
      DATE-OBS keyword. If DATE-OBS keyword cannot be found, it will be copied,
      e.g. remain @DATE-OBS.
    </para>
    <para> 
      Substrings begining with % are expanded to various image-related values.
      They list is provided bellow.
    </para>
    <refsect2>
      <title>Formatting specifiers</title>
      <para>
	Users can specify minimum length of the expanded string. If length is
	prefixed with 0, the expand string will be right padded with 0 to
	specified length.
      </para>
    </refsect2>
    <variablelist>
      <varlistentry>
        <term>
	  <option>_</option>
	</term>
	<listitem>
	  <para>Original name of the image. Available only by renaming the image. Otherwise equals to %f.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>A</option>
	</term>
	<listitem>
	  <para>Exposure start date</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>a</option>
        </term>
        <listitem>
          <para>Exposure start day in the year</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>b</option>
        </term>
        <listitem>
          <para>Image base path, ussually /images/[epoch].</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>C</option>
	</term>
	<listitem>
	  <para>ctime (seconds form 1-1-1970) of exposure start.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>c</option>
        </term>
        <listitem>
          <para>Camera name.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>D</option>
        </term>
        <listitem>
          <para>Exposure start night day of the month.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>d</option>
        </term>
        <listitem>
          <para>Exposure start day of the month.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>E</option>
        </term>
        <listitem>
          <para>CCD exposure in seconds.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>e</option>
        </term>
        <listitem>
          <para>Epoch of CCD observation.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>F</option>
        </term>
        <listitem>
          <para>Filter which was used for exposure name.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>f</option>
        </term>
        <listitem>
          <para>Standard filename (same as %y%m%d%H%M%S-%s-%p.fits).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>i</option>
        </term>
        <listitem>
          <para>Image ID. Each image have number, which increase from 1 during observation.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>J</option>
	</term>
	<listitem>
	  <para>Julian date of exposure start</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>L</option>
        </term>
        <listitem>
          <para>Switch to print next dates in local time.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>M</option>
        </term>
        <listitem>
          <para>Exposure start Minute - either local or UT time.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>m</option>
        </term>
        <listitem>
          <para>Exposure start month.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>N</option>
	</term>
	<listitem>
	  <para>Night date -format as YYYYMMDD, e.g. when it is 2009-01-05 01:30 UT, %N is expanded to 20090430.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>n</option>
        </term>
        <listitem>
          <para>Exposure number. Counted from 1 when script starts. If you are looking for unique number, please look for <option>u</option> option.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>O</option>
        </term>
        <listitem>
          <para>Exposure start night month.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>o</option>
        </term>
        <listitem>
          <para>Observation ID.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>p</option>
        </term>
        <listitem>
          <para>
	    Processing state of image. See list of procesing state strings in
	    rts2 (1), in "IMAGE PROCESSING STATES" section.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>R</option>
	</term>
	<listitem>
	  <para>Executor (selector) target ID</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>S</option>
        </term>
        <listitem>
          <para>Exposure start seconds.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>s</option>
        </term>
        <listitem>
          <para>Exposure start miliseconds.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>T</option>
        </term>
        <listitem>
          <para>Target name</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>t</option>
        </term>
        <listitem>
          <para>Target ID.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>U</option>
        </term>
        <listitem>
          <para>Switch all next printed dates to UT time.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>u</option>
	</term>
	<listitem>
	  <para>
	    Unique number incorporated into filename. Start number on 1, and
	    increase it as long as file with given name exists. Should be used
	    to create uninterupted ascension of filenames.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>Y</option>
        </term>
        <listitem>
          <para>Four digits night year of the start of exposure.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>y</option>
        </term>
        <listitem>
          <para>Four digits year of the start of exposure.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>X</option>
        </term>
        <listitem>
          <para>Two digits night year of the start of exposure.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>x</option>
        </term>
        <listitem>
          <para>Two digits year of the start of exposure.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>Z</option>
        </term>
        <listitem>
          <para>Exposure time zone.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>TARGET SCHEDULING</title>
    <para>
      RTS2 enables two basic modes of operation - dispatch scheduling and
      queue scheduling. Queue scheduling allows the observer to put a list of
      targets which he/she would like to observe to the database. It is
      convenient when the observer is at the telescope and can check local
      weather conditions.  Dispatch scheduling is ideal for an autonomous
      system where there is no human intervention.
    </para>
    <para>
      We regard this combination of both approaches in one system as quite
      unique - other systems have decided to use either dispatch or queue
      scheduling.
    </para>
    <para>
      We think that by facilitating both approaches users have a
      wider range of options at their disposal. Also, given the separation of
      the selection and execution components, it will be quite easy to
      implement other types of scheduling.
    </para>
    <refsect2>
      <title>DISPATCH SCHEDULING</title>
      <para>
	Dispatch scheduling uses a target merit function to calculate merit for
	all currently observable targets, and then selects the target with the
	highest merit. The advantage of this approach is its self-drivenness.
	Its major disadvantage is its inability to reasonably predict what will
	be observed during the night.
      </para>
    </refsect2>
    <refsect2>
      <title>QUEUE SCHEDULING</title>
      <para>
	The plan is stored in a separate database table, which lists the target
	and starting time of the observation. The queue scheduling is actually
	implemented as a subclass of target which has its own merit function
	based on whether a plan is entered or not. The selector selects the
	queue scheduling based on merit as with every other observation, and
	puts it to the executor, which calls plan routines to select the actual
	observation.
      </para>
      <para>
	 As queue scheduling is still merit-based, when a target with higher
	 merit appears (usually a GRB}, queue scheduling will not be selected
	 by selector and the GRB will be properly observed.
      </para>
    </refsect2>
  </refsect1>
  <refsect1>
    <title>TARGET HIERARCHY</title>
    <para>
      To enable observation of different targets, a target hierarchy was
      created. Its parent object is Target, which provides the interface to
      various target-related calculations.
    </para>
    <para>
      There are various subclasses of Target. For example, there is a subclass
      for targets in solar orbit (comets and minor planets).
    </para>
    <refsect2>
      <title>TARGET CHAINING</title>
      <para>
	Targets sometimes use "chaining". This is when one master target holds
	a list of possible targets, from which it selects the actual
	observation to be performed.
      </para>
      <para>
	Chaining was developed for observations of the INTEGRAL targets. The
	GCN sends information on the next INTEGRAL pointing to rts2-grbd.
	Rts2-grbd stores this information to a database table.  When an
	instance of class IntegralFOV is created, it will hold coordinates of
	the last INTEGRAL target. When such an instance is created in selector,
	its merit function will be high when the last IntegralFOV is above the
	local horizon and low when it's below the local horizon.
      </para>
      <para>
	When IntegralFOV is created in the executor, its methods will give as a
	target the coordinates of the last INTEGRAL FOV. When rts2-grbd inserts
	new target coordinates to the database, the IntegralFOV object will
	retrieve them and use them for its coordinates. When the next target is
	below the horizon, the selector will select another target.
      </para>
      <para>
        Target chaining is also used for other special targets. The plan target is coded
	using chaining -- it holds a reference to the actual plan target, and
	provides its coordinates in overwritten methods for plan access. The
	plan target also holds information about the next plan entry, so queue
	targets get changed on time.
      </para>
      <para>
	Another use of chaining is for the airmass monitoring target. Here, the
	master target selects calibration stars at various airmass ranges in
	order to provide information about atmospheric conditions at the
	observation site.
      </para>
    </refsect2>
  </refsect1>  
  <refsect1>
    <title>GENERAL MANUAL PAGES</title>
    <para>
      <citerefentry>
        <refentrytitle>rts2.fitskeys</refentrytitle>
	<manvolnum>5</manvolnum>
      </citerefentry>
    </para>
    <para>
      <citerefentry>
        <refentrytitle>rts2.script</refentrytitle>
	<manvolnum>5</manvolnum>
      </citerefentry>
    </para>
   <para>
      <citerefentry>
        <refentrytitle>rts2.target</refentrytitle>
	<manvolnum>5</manvolnum>
      </citerefentry>
    </para>
  </refsect1>

  <refsect1>
    <title>DEVICES</title>
    <para>
      teld-*, camd-*, filterd-*, dome-*, focusd-*, mirrord-*
      <refsect2>
        <title>Cameras</title>
	<para>
  	  <citerefentry>
            <refentrytitle>rts2-camd</refentrytitle>
	    <manvolnum>7</manvolnum>,
          </citerefentry>
          <citerefentry>
            <refentrytitle>rts2-camd-andor</refentrytitle>
	    <manvolnum>7</manvolnum>
          </citerefentry>,
          <citerefentry>
            <refentrytitle>rts2-camd-reflex</refentrytitle>
            <manvolnum>7</manvolnum>
          </citerefentry>
	</para>
      </refsect2>
      <refsect2>
        <title>Domes</title>
	<para>
  	  <citerefentry>
            <refentrytitle>rts2-dome</refentrytitle>
	    <manvolnum>7</manvolnum>
          </citerefentry>
	</para>
      </refsect2>
      <refsect2>
        <title>Mounts</title>
        <para>
          <citerefentry>
            <refentrytitle>rts2-teld</refentrytitle>
            <manvolnum>7</manvolnum>
          </citerefentry>
        </para>
      </refsect2>
    </para>

  </refsect1>

  <refsect1>
    <title>SERVICES</title>

    <para>
      <citerefentry>
        <refentrytitle>rts2-httpd</refentrytitle>
	<manvolnum>7</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-executor</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-selector</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-imgproc</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-grbd</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-httpd</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-xmlrpcclient</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-augershooter</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>
    </para>

  </refsect1>

  <refsect1>
    <title>MONITORING AND MANAGING UTILITIES</title>

    <para>
      <citerefentry>
        <refentrytitle>rts2-mon</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-target</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-targetinfo</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
         <refentrytitle>rts2-focusc</refentrytitle>
	 <manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
         <refentrytitle>rts2-xfocusc</refentrytitle>
	 <manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-seltest</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-tpm</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-logger</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-image</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-plan</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>
    </para>
  </refsect1>
  <refsect1>
    <title>FILES</title>

    <para>
      <citerefentry>
        <refentrytitle>rts2.ini</refentrytitle>
	<manvolnum>5</manvolnum>
      </citerefentry>
    </para>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>

    <para>http://rts2.org</para>

  </refsect1>

  <refsect1>
    <title>AUTONOMOUS OBSERVATORY SYSTEM</title>
    <para>
      Here is some theoretical background, please skip it if you are
      looking for description of system.
    </para>
    <para>
      It is widely accepted that full automated operation of telescopes not
      only enables observers to live life during the day, but also enables
      better use of telescope time and brings costs savings and better
      efficiency to the whole observational setup.
    </para>
    <para>
      If the observer's goal is to hunt for GRBs afterglows (the task for which
      RTS2 was designed), it will be impractical for him/her to wait for a couple
      of months for a suitable GRB, in the meantime performing only routine
      night observations, and then to attempt to perform precise observations
      of a GRB location as quickly as possible (in minutes, preferably seconds)
      when a suitable GRB trigger arrives.  It will be even more difficult, if
      not impossible, for an observer to carry out these observations in remote
      places, such as middle of the South American Pampas.
    </para> 
    <para>
      There are some remote observing solutions offered for amateur or
      semi-professional observers, primary focused on acquiring nice images of
      the night sky with a telescope under computer control. There are only a
      few complete packages capable of managing a whole integrated observatory
      which are targeted at the scientific community. RTS2 is to our knowledge
      the only one for which the complete source code is available, released
      under GNU General Public Licence, which allows the code to be modified.
    </para>
    <para>
      In addition, most of the imaging systems offered run on the Microsoft
      Windows platform, which is renowned in the industry for the instability
      of the operating system kernel, and which is, given its GUI-oriented
      nature, quite difficult to manage truly remotely over long distances.
      RTS2 was primary developed on Linux OS, which is quite easily - even
      over long distances - controlled through various remote shell options,
      SSH now being the most widely used. An SSH session from Europe to say
      South America is easily conceivable due to its low bandwidth usage.
    </para>
    <para>
      That definitely is not true for GUI based remote access, which both
      Windows (usually as extra-paid service) and Linux/UNIX (as core of X
      Window System) allow.
    </para>
  </refsect1>

  <refsect1>
    <title>ACKNOWLEDGMENTS</title>
    <para>
      We would like to thank to GA AV CR for the support via grant A3003206 and
      ESA PECS Project 98023, the Spanish Ministry of Education and Science for
      the support via FPU grant AP2003-1407.
    </para>
    <para>
      We would like to acknowledge INTA for the hospitality provided at the
      INTA-CEDEA BOOTES-1 observing station.
    </para>
  </refsect1>
</refentry>
