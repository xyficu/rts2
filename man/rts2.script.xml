<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [

  <!ENTITY dhfirstname "<firstname>Petr</firstname>">
  <!ENTITY dhsurname   "<surname>Kubanek</surname>">
  <!ENTITY dhdate      "<date>2012-01-13</date>">
  <!ENTITY dhsection   "<manvolnum>5</manvolnum>">
  <!ENTITY dhemail     "<email>petr@kubanek.net</email>">
  <!ENTITY dhusername  "Petr Kubanek">
  <!ENTITY dhpackage   "rts2.script">

  <!ENTITY % rts2 SYSTEM "rts2.ent">
  %rts2;
]>

<refentry>
  <refentryinfo>
    <title>&dhpackage;</title>
    <productname>rts2</productname>
    <productnumber>&rts2version;</productnumber>
    &dhdate;
    <authorgroup>
      <author>
        &dhfirstname;
        &dhsurname;
	<contrib>Wrote this manual page.</contrib>
	<address>
          &dhemail;
	</address>
      </author>
      <author>
	<firstname>Michael</firstname>
	<surname>Prouza</surname>
	<contrib>Contributed to this manual page.</contrib>
      </author>
    </authorgroup>
    <copyright>
      <year>2006-2014</year>
      <holder>&dhusername;</holder>
    </copyright>
    <copyright>
      <year>2011</year>
      <holder>&fzu;</holder>
    </copyright>
    &legal;
  </refentryinfo>
  <refmeta>
    <refentrytitle>&dhpackage;</refentrytitle>
    &dhsection;
  </refmeta>
  <refnamediv>
    <refname>&dhpackage;</refname>
    <refpurpose>Scripting for Remote Telescope System, 2nd Version.</refpurpose>
  </refnamediv>
  <refsect1>
    <title>SYNOPSIS</title>

    <para>
      Scripting is used to command various devices, which can be found in RTS2 setup.
    </para>

    <para>
      Script can contain block, enclosed in curved brackets ({}).
      This block ussually comes after 'for', 'if' and similar commands.
    </para>

  </refsect1>
  <refsect1>
    <title>COMMANDS</title>

    <para>
      Commands are separated by an arbitrary number of spaces. 
      Here in this description we use parameters enclosed in
      {curved brackets}, and afterwards explanation of their 
      meaning is given in text.  Numerical values are entered 
      in standard decimal notation.
    </para>

    <variablelist>
      <varlistentry>
        <term><option>cmd {command}[({arg{,arg2..}})]</option></term>
	<listitem>
	  <para>
	    Execute arbitrary command on the device. Command parameters can be
	    specified in round bracket, separated with comma, without any space
	    between command and ending bracket.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>exe {executable filename}</option>
	</term>
	<listitem>
	  <para>
	    Execute external script. The script communicates with executor through
	    standard input and outputs - both normal and error output. For documentation of the
	    protocol, as well as available Python class for handling of this communication, please
	    see bellow.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <option>SEQUENCE {filter} {repeat} {exposure_time}</option>
	</term>
	<listitem>
	  <para>
	    Performs exposure sequence. First set a filter, described as
	    parameter. Then repeat <emphasis>repeat</emphasis> times execution of exposures
	    with duration <emphasis>exposure_time</emphasis> seconds.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>E {exposure_time}</option>
	</term>
	<listitem>
	  <para>
	    Takes light exposure. Exposure time is specified
	    in seconds.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>D {exposure_time}</option>
	</term>
	<listitem>
	  <para>
	    Takes dark frame, useful for calibration. Exposure time is specified
	    in seconds.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>I {exposure_time}</option>
	</term>
	<listitem>
	  <para>
	    Takes an image, without changing shutter position. If the observer
	    wish to have certain shutter position, SHUTTER= command must be
	    used before I command. Exposure time is specified in seconds.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <replaceable>{value name}</replaceable><replaceable>operation</replaceable><replaceable>{new value}</replaceable>
	</term>
	<listitem>
	  <para>
	    Perform value change of the specified value. <replaceable>value
	    name</replaceable> is name of the value, <replaceable>new
	    value</replaceable> is new value, either as string, or number in
	    decimal notation. <replaceable>operation</replaceable> can be one
	    of the following:
	    <variablelist>
  	      <varlistentry>
	        <term>
		  <option>=</option>
		</term>
		<para>
		  Set new value. It works with all types of variables.
		</para>
	      </varlistentry>
  	      <varlistentry>
	        <term>
		  <option>+=</option>
		</term>
		<para>
		  Increase value. Works only with numeric values.
		</para>
	      </varlistentry>
  	      <varlistentry>
	        <term>
		  <option>-=</option>
		</term>
		<para>
		  Decrease value. Works only with numeric values.
		</para>
	      </varlistentry>
	    </variablelist>
	    Please see EXAMPLES section for sample scripts, which might clear
	    how this command operates better than the description.
	  </para>
	  <para>
	    Value name, operation and new value must be written without space.
	    This is invalid syntax: <option>focpos +=10</option>,
	    <option>focpos+= 10</option>. This is valid:
	    <option>focpos+=10</option>.
	  </para>
	  <para>
	    Variables which have more the one component (telescope axes and
	    offsets,..) must be coma "," separated and enclosed in round
	    brackets "(", ")". This is valid syntax for increase of the
	    telescope offset by 10 degrees in RA and 5 degrees in DEC:
	    <option>T0.OFFS+=(10,5)</option>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>O {unknown}</option>
	</term>
	<listitem>
	  <para>
	    Reserved for focusing command. Not implemented yet.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>C {ra_diff} {dec_diff}</option>
	</term>
	<listitem>
	  <para>
	    Change mount position before next exposure by {ra_diff}
	    and {dec_diff}. Wait until no exposure is
	    going on, then perform move, then continue exposing. Please note,
	    that telescope which should change must by specified with . notation - so
	    if your telescope is called T0, you must write T0.C {ra_diff} {dec_diff}
	  </para>
	  <para>
	    {ra_diff} and {dec_diff} are in degrees.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>hex {ra_diff} {dec_diff} [block]</option>
	</term>
	<listitem>
	  <para>
	    Change mount position in hex pattern after finishing
	    [block] and execute [block] again. This will produce
	    images which are aligned on hexagonal path.
	  </para>
	  <para>
	    {ra_diff} and {dec_diff} are in degrees.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>fxf {ra_diff} {dec_diff} [block]</option>
	</term>
	<listitem>
	  <para>
	    Change mount position in 5x5 rectangular pattern after finishing
	    [block] and execute [block] again. This will produce images, which
	    are aligned on rectangular path.
	  </para>
	  <para>
	    {ra_diff} and {dec_diff} are in degrees.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>BIN {binning} </option>
	</term>
	<listitem>
	  <para>
	    Change both vertical and horizontal binning. Will be
	    dropped in favour of constant settings.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>BOX {x} {y} {width} {heigh} </option>
	</term>
	<listitem>
	  <para>
	    Readout only area of the chip, specified by pixel coordinates of
	    upper left corner (x and y) and by area width and height.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>CENTER {width} {height} </option>
	</term>
	<listitem>
	  <para>
	    Readout center of the chip of provided width and height (in
	    pixels).
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>W</option>
	</term>
	<listitem>
	  <para>
	    Generic wait for any signal.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>A {precision} {exposure_time}</option>
	</term>
	<listitem>
	  <para>
	    Takes an image of {exposure_time}, tries astrometry, waits for
	    a result. If the image is not within {precision} in degrees from
	    a target position, then the procedure is repeated. 
            It will continue and it will take multiple images, as
	    long as precision of the last image is at least twice better
	    than previous image - e.g. if o1 is offset of the last image,
	    and o0 is offset of previous one, o1 &lt; o0 / 2.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>Aw</option>
	</term>
	<listitem>
	  <para>
	    Wait until A command on other camera is finished. If there
	    is no running script with A command on any other device, it will
	    continue with the next command.
	  </para>
	</listitem>
      </varlistentry>

       <varlistentry>
        <term>
	  <option>P {filter} {exposure} {count}</option>
	</term>
	<listitem>
	  <para>
	    Do measurements using photometer. {filter} is filter number
	    (integer), {exposure} is exposure time in seconds (float
	    number), and {count} is integer specifying how many
	    measurements will be taken.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>PS {radius} {speed}</option>
	</term>
	<listitem>
	  <para>
	    Do cross-shaped search of maxima on photometer. {radius} specifies
	    size of the arms in degrees, which will be searched, and speed
	    specifies speed which will be used.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>block_waitsig {signal}</option>
	</term>
	<listitem>
	  <para>
	    Execute next block only if given signal arrives.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>ifacq [block] [else [block]]</option>
	</term>
	<listitem>
	  <para>
	    Start given commands only if acquisition of target ended
	    sucessfully.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>for {repeat_number} [block]</option>
	</term>
	<listitem>
	  <para>
	    Execute commands in block for {repeat_number} times.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>while {condition} {max_repeat} [block]</option>
	</term>
	<listitem>
  	  <para>
	    Execute block while condition evaluation is non-zero and number of
	    repeats is smaller then max_repeat.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>do {max_repeat} [block] while {condition}</option>
	</term>
	<listitem>
	  <para>
	    Execute block while condition evaluation is non-zero and number of
	    repeats is smaller then max_repeat. First test of condition occurs
	    after first loop.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>once [block]</option>
	</term>
	<listitem>
	  <para>
	    Execute block only when the target script is executed for the first
	    time. This command is ideal for executing focusing runs before the
	    first science image.
	  </para>
	  <para>
	    This command is usefull only for scripts executed from the
	    <citerefentry><refentrytitle>rts2-executor</refentrytitle><manvolnum>7</manvolnum></citerefentry>.
	    The block is run as without <emphasis>once</emphasis> command,
	    when executed from the other tools capable of script execution.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>waitfor {variable} {value} {range}</option>
	</term>
	<listitem>
	  <para>
	    This command will wait for numeric {variable} to reach {value} with {range} margin.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>sleep {seconds}</option>
	</term>
	<listitem>
	  <para>
	    This command will pause execution of script for given number of seconds.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>wait_idle</option>
	</term>
	<listitem>
	  <para>
	    Wait for device to enter idle state.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>SS {signal}</option>
	</term>
	<listitem>
	  <para>
	    Send given signal. Other scripts can wait for signal with
	    SW command. Signal is integer number, which should be
	    unique in script.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>SW {signal}</option>
	</term>
	<listitem>
	  <para>
	    Wait for a signal. Execution of the script is paused until
	    the signal with given number ({}) is send.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>tardisable</option>
	</term>
	<listitem>
	  <para>
	    Disable target. In consectutive selector runs, it will not
	    be considered for selection. Target can be re-enabled by
	    rts2-target (1) command executed with -e option.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>tempdisable {delay}</option>
	</term>
	<listitem>
	  <para>
	    Temporaly disable target for delay seconds. Delay can be specified
	    using delay string - e.g. h for hours, w for weeks. So to temporary
	    delay target for 1 week, 2 days and 3 hours, the delay will be
	    1w2d3h. If next selector run hapened earlier then delay time from
	    now, target will not be considered for observing. Target temporary
	    disable is stored in NEXT_OBSERVABLE target parameter, which can be
	    reseted by rts2-target (1) command executed with -o option.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term>
	  <option>tarboost {seconds} {bonus}</option>
	</term>
	<listitem>
	  <para>
	    Temporary boost of target for {seconds}. It changes value of
	    TARGET BONUS and TARGET BONUS TIME fields. Those fields
	    can be changed by rts2-target (1) command executed with -b
	    and -t options.
	  </para>
	</listitem>
      </varlistentry>

    </variablelist>
  </refsect1>
  <refsect1>
    <title>Communication with executable</title>
    <para>
      If you use <emphasis>exe</emphasis> command in scripting, the script
      should communicate with RTS2 through standart input and outputs. The
      protocol is simple, text oriented, with lines ending with \n (end of line).
      It is possible to write observing script using shell echo and read
      commands, as is demonstrated in example bellow. But for higher
      interaction, some higher language is prefered - based on user preferences,
      any of Python, PHP, Perl, TCL or other language capable to read and
      write to file descriptor will work.
    </para>
    <variablelist>
      <varlistentry>
        <term><option>exposure</option></term>
	<listitem><para>
	  Start exposure on the camera. Current exposure length setting and
	  others current settings will be used.
	</para><para>
	  When exposure is finished, controlling script receives notification
	  on standard input with <emphasis>exposure_end</emphasis> string. 
	</para><para>
	  When the image is written to disk, controlling script receives image
	  name on standard input, preceeded by <emphasis>image</emphasis>
	  string. Script is responsible to specify treatment of the image - it
	  might be copied, renamed or moved to some system locations. Please
	  see bellow for an example. <emphasis>If the script does not specify
	  what will done with the image, the image will be deleted when script
	  ends.</emphasis>
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>exposure_wfn {pattern}</option></term>
        <listitem><para>
          Allow user to provide filename for the next exposure(s). Works similarly to
          exposure command, with the exception that the file is not accesible after exposure
          is finished. Pattern, the only argument, is the RTS2 expand pattern for new filename.
	  <emphasis>Script does not have to specify what should be done with the image in order
	  to keep it on the disk after the script finish.</emphasis>
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>exposure_overwrite {pattern}</option></term>
        <listitem><para>
	  Similar to <emphasis>exposure_wfn</emphasis>, but overwites existing file if pattern
	  expand to an existing file.
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>progress {start} {expected end}</option></term>
	<para>
	  Report script progress. Script start and end times (in ctime, e.g.
	  seconds from 1-1-1970) are the only allowed arguments. Expected end
	  should be in future, start should be some time ago.
	</para>
	<para>
	  Issuing such command will update script_end and script_start
	  variables. Maximal/minimal times of all running scripts are used for
	  end/start times progress of the scripting device state.
	</para>
      </varlistentry>
      <varlistentry>
        <term><option>rename {image name} {expression}</option></term>
	<listitem><para>
	  Renames image to given by an expression. Updates image record in database. Please see
	  <citerefentry><refentrytitle>rts2.ini</refentrytitle><manvolnum>5</manvolnum></citerefentry>
	  for details of the expression. Bellow is an example, which start
	  exposure, waits for image and rename image to given location.
	  Returns new image name.
	</para><literallayout>
echo exposure
read exposure_end # is notified of exposure end
read image imagename  # $image will hold "image" string
echo rename $imagename /foo/bar/%f  # renames acquired image to /foo/bar/{standard image pattern}	
read new_name # reads new image name to $new_name
	</literallayout></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>move {image name} {expression}</option></term>
	<listitem><para>
	  Move image to given path, delete it from the database. Please see
	  rename command for an example. Returns new image name.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>copy {image name} {expression}</option></term>
	<listitem><para>
	  Copy image to path given by an expression. Please see
	  <citerefentry><refentrytitle>rts2.ini</refentrytitle><manvolnum>5</manvolnum></citerefentry>
	  for details of the expression. See rename command for an example.
	  Returns new image name.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>process {image name}</option></term>
	<listitem><para>
	  Queue image to standard processing in
	  <citerefentry><refentrytitle>rts2-imgproc</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>flat {image name}</option></term>
	<listitem><para>
	  Move given image to sky flat destination, configured in
	  <citerefentry><refentrytitle>rts2.ini</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
	  Returns new image name.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>dark {image name}</option></term>
	<listitem><para>
	  Move given image to raw dark destination, configured in
	  <citerefentry><refentrytitle>rts2.ini</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
	  Returns new image name.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>archive {image name}</option></term>
	<listitem><para>
	  Move given image to raw dark destination, configured in
	  <citerefentry><refentrytitle>rts2.ini</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
	  Returns new image name.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>trash {image name}</option></term>
	<listitem><para>
	  Move given image to trash destination, configured in
	  <citerefentry><refentrytitle>rts2.ini</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
	  Returns new image name.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>V {device} {value name} {operator} {operand1 [operand2..]}</option></term>
	<listitem><para>
	  Change value of variable of given device. Operand can be any of =, +=
	  or -=. If value have multiple components (e.g. telescope RA DEC
	  offsets, or camera readout area), you must separated components with
	  space.  Examples:
	</para><literallayout>
echo V W0 filter += 1 # increases filter of device W0 by one
echo V T0 WOFFS = 0.01 0.01 # set WOFFS of device T0 to 0.01 in RA and DEC
echo V C1 WINDOW = 0 0 10 10 # set C1 WINDOW (readout area). C1 will read only upper left square with size of 10 pixels
	</literallayout></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>VT {device_type} {value name} {operator} {operand1 [operand2..]}</option></term>
	<listitem><para>
	  Change value of variable of devices of given type. Operand can be any of =, +=
	  or -=. If value have multiple components (e.g. telescope RA DEC
	  offsets, or camera readout area), you must separated components with
	  space. Following strings are allowed for device_type:
	  <variablelist>
	    <varlistentry><term>TELESCOPE</term></varlistentry>
	    <varlistentry><term>CCD</term></varlistentry>
	    <varlistentry><term>DOME</term></varlistentry>
	    <varlistentry><term>WEATHER</term></varlistentry>
	    <varlistentry><term>PHOT</term></varlistentry>
	    <varlistentry><term>PLAN</term></varlistentry>
	    <varlistentry><term>FOCUS</term></varlistentry>
	    <varlistentry><term>CUPOLA</term></varlistentry>
	    <varlistentry><term>FW</term></varlistentry>
	    <varlistentry><term>SENSOR</term></varlistentry>
	  </variablelist>
	  Examples:
	  </para><literallayout>
echo VT FW filter += 1 # increases filter of all filter wheels by one
echo VT TELESCOPE WOFFS = 0.01 0.01 # set WOFFS of all telescopes to 0.01 in RA and DEC
echo VT CCD WINDOW = 0 0 10 10 # set all CCDs WINDOW (readout area).
	</literallayout></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>set_own {value name} {new value}</option></term>
        <listitem><para>
	  Change own value. Particularly usefull for values created with
          <emphasis>string</emphasis> and similar commands.
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>value {value name} {operator} {operand1 [operand2..]}</option></term>
	<listitem><para>
	  Change value of variable of script device. This is shortcut to easily
	  interact with device on which the script is run. It is otherwise
	  similar to V command.
	</para><literallayout>
echo value exposure += 1
echo value WINDOW = 0 0 10 10 
	</literallayout></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>device_by_type {device_type}</option></term>
	<listitem><para>
	  Retrieves name of the first device with given type. Device type is
	  specified by strings listed in <emphasis>VT</emphasis> command.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>target_disable</option></term>
	<listitem><para>
	  Disable target for autonomouse selection.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>target_tempdisable {seconds}</option></term>
	<listitem><para>
	  Temporary disable target for a given number of seconds.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>end_script</option></term>
	<listitem><para>
	  End target script. Ask controlling block to end whole script.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>end_target</option></term>
        <listitem><para>
	  End target execution. Ends scripts of all cameras, and execute next
          target if there is some available.
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>stop_target</option></term>
        <listitem><para>
	  Stop target execution. Ends scripts of all cameras, and stop the executor.
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>wait_target_move</option></term>
        <listitem><para>
          Wait for target movement command completion. When this command returns with 0,
          system telescope daemon is guarantee to have proper target coordinates for the
          next target execution.
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>loopcount</option></term>
	<listitem><para>
	  Print current loopcount. It is 0 when target script is executed for
	  the first time.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>run_device</option></term>
	<listitem><para>
	  Return name of the device on which the script is running.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>? {value name}</option></term>
	<listitem><para>
	  Retrieves value of variable from scripting device. The value of
	  variable is printed on standard output. If an erorr occured, string
	  ERR is printed. See <emphasis>G</emphasis> command for an example - the only
	  diference is that you should not specify device name.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>G {device name} {value name}</option></term>
	<listitem><para>
	  Retrieves value of given variable from given device. The value of
	  variable is printed on standard output. If an error occured, string
	  ERR is printed. See bellow for an example:
	</para><literallayout>
G W0 filter
	</literallayout><para>
	  If filter is set to number 5, 5 will be printed (followed by line
	  feed) on standard output.
	</para></listitem>
      </varlistentry>
      <varlistentry>
	<term><option>get_own {value name}</option></term>
	<listitem><para>
	  Retrieves own value. This is similar to <emphasis>G</emphasis> or <emphasis>?</emphasis>. It
	  is handy to retrieve values created by <emphasis>string</emphasis> and other value cleation
	  commands.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>S {device name}</option></term>
	<listitem><para>
	  Retrieves device state. Can retrieve centrald state if
	  <emphasis>device name</emphasis> parameter is
	  <emphasis>"centrald"</emphasis>.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>waitidle {device name} {timeout}</option></term>
	<listitem><para>
	  Waits for <emphasis>timeout</emphasis> number of seconds for
	  specified device to enter idle state. Return either 1 if device
	  reached idle status, or 0 if the call timeouts.
        </para><para>
	  This function is equvivalent to calling <emphasis>S</emphasis>
	  command, compare status and return 1 if device properly reached idle,
	  0 if it timeouts.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>C {device name} {command..}</option></term>
	<listitem><para>
	  Executes an arbitary command on device. Please see device
	  drivers source code for allowed commands - they are called from
	  commandAuthorize call.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>CT {device_type} {command..}</option></term>
        <listitem><para>
	  Executes an arbitary command on all device of given type. Please see
          <emphasis>VT</emphasis> command for list of allowed device type strings.
        </para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>command {command..}</option></term>
	<listitem><para>
	  This call is similar to C (see above), except that the command is called on
	  current scripting device.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>tempentry {file/directory}</option></term>
	<listitem><para>
	  Add entry to list of files/directories, which will be deleted when
	  script terminates. As security precaution, only files from /tmp directory
	  can be specified in the path. File or directory must exists and must be writable
	  at the time the command is issued. If the entry is removed by the script
	  before it finish, no error is reported.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>double {variable name} {variable description} {value} [{rts2 type}]</option></term>
        <term><option>double_w {variable name} {variable description} {value} [{rts2 type}]</option></term>
	<listitem><para>
	  Creates or update device double value. If variable with given name
	  and double type is not in the device, it is created, populated with
	  description, value type and value. If the variable is found and is of double
	  type, its value is updated.
	</para><para>
	  The second form, <emphasis>double_w</emphasis>, creates writable variable. The first form
          creates variable which can be update only from a script. If the value already exists, it
	  is not altered and a warning is issued. <emphasis>_w</emphasis> suffix is used with other
	  variable commands described below to distinguish between constant, changeable only from the script,
	  and writable variable, which can be changed by the user.
	</para><para>
	  This way, the script can permanently inform users about values it
	  found. Assuming there is a <emphasis>FWHM</emphasis> measuring sctipt, echoing
	  <literallayout>
double fwhm "[pixels] current FWHM, as meassured by foo bar script" 6.32
          </literallayout>
	  will create <emphasis>fwhm</emphasis>, with given description and value equals to 6.32.
	</para>
	<para>
	  The following constants can be specified as <emphasis>type</emphasis>:
	<variablelist>
	  <varlistentry>
	    <term><option>DT_RA</option></term>
	  </varlistentry>  
          <varlistentry>
	    <term><option>DT_DEC</option></term>
	  </varlistentry>
          <varlistentry>
	    <term><option>DT_DEGREES</option></term>
	  </varlistentry>
          <varlistentry>
	    <term><option>DT_DEG_DIST</option></term>
	  </varlistentry>
          <varlistentry>
	    <term><option>DT_PERCENTS</option></term>
	  </varlistentry>
          <varlistentry>
	    <term><option>DT_ROTANG</option></term>
	  </varlistentry>
          <varlistentry>
	    <term><option>DT_HEX</option></term>
	  </varlistentry>
          <varlistentry>
	    <term><option>DT_BYTESIZE</option></term>
	  </varlistentry>
          <varlistentry>
	    <term><option>DT_KMG</option></term>
	  </varlistentry>
          <varlistentry>
	    <term><option>DT_INTERVAL</option></term>
	  </varlistentry>
          <varlistentry>
	    <term><option>DT_ONOFF</option></term>
	  </varlistentry>
	</variablelist>
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>time {variable name} {variable description} {value}</option></term>
        <term><option>time_w {variable name} {variable description} {value}</option></term>
	<listitem><para>
	  Creates or update device time value. Similar to
	  <emphasis>double</emphasis> and <emphasis>double_w</emphasis> commands, described above.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>integer {variable name} {variable description} {value}</option></term>
        <term><option>integer_w {variable name} {variable description} {value}</option></term>
	<listitem><para>
	  Creates or update device integer value. Similar to
	  <emphasis>double</emphasis> and <emphasis>double_w</emphasis> commands, described above.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>string {variable name} {variable description} {value}</option></term>
        <term><option>string_w {variable name} {variable description} {value}</option></term>
	<listitem><para>
	  Creates or update device string value. Similar to
	  <emphasis>double</emphasis> and <emphasis>double_w</emphasis> commands, described above.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>bool {variable name} {variable description} {value}</option></term>
        <term><option>bool_w {variable name} {variable description} {value}</option></term>
	<listitem><para>
	  Creates or update device boolean value. Similar to
	  <emphasis>double</emphasis> and <emphasis>double_w</emphasis> commands, described above.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>onoff {variable name} {variable description} {value}</option></term>
        <term><option>onoff_w {variable name} {variable description} {value}</option></term>
	<listitem><para>
	  Creates or update device boolean value with ON/OFF type. Similar to
	  <emphasis>bool</emphasis> and <emphasis>bool_w</emphasis> commands, described above.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>double_array {variable name} {variable description} {values..}</option></term>
        <term><option>double_array_w {variable name} {variable description} {values..}</option></term>
	<listitem><para>
	  Creates or update double array variable. If the array variable
	  exists, its values are overwritten by specified values. Values to an
	  existing array can be added with
	  <emphasis>double_array_add</emphasis> command.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>double_array_add {variable name} {values..}</option></term>
	<listitem><para>
	  Add new values to an existing double array variable.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>radec {ra} {dec}</option></term>
	<listitem><para>
	  Moves telescope to given equatorial (RA DEC) coordinates. Coordinates
	  can be specified in HMS and DMS - see example bellow.
	</para><literallayout>
echo move 15 1  # moves to 1h RA, 1deg DEC
echo move 1:2:3.4 -1:30 # moves to RA 1h 2m 3.4sec and DEC -1.5 deg
	</literallayout></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>newobs {ra} {dec}</option></term>
	<listitem><para>
	  Same as <emphasis>radec</emphasis>, but force system to log start of
	  the new observation.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>altaz {alt} {az}</option></term>
	<listitem><para>
	  Moves telescope to given horizontal (altitude and azimuth) coordinates. Tracking is still enabled after move finished. This command should be used when observations at some horizontal position are required from the script.
	</para><literallayout>
echo altaz 20 30  # moves to 20 deg alttitude, 30 deg azimuth
	</literallayout></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>newaltaz {alt} {az}</option></term>
	<listitem><para>
	  Same as <emphasis>altaz</emphasis>, but similarly to
	  <emphasis>newobs</emphasis> starts new observation.
	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>waitidle</option></term>
	<listitem><para>

	</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><option>log {level} {message}</option></term>
	<listitem><para>
	  Log something through RTS2 logging system. First letter of loglevel
	  is significant, and its case does not matter. Log level can be E for errors,
	  W for warnings, I for info, and D for debug messages.
	</para></listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>Variables</title>
    <para>
      Inside scripting, following syntax is used to access variables values.
      Please see examples at the end of this man page to gain better
      understanding of the topic.
    </para>
    <variablelist>
      <varlistentry>
        <term>
	  <option>.{variable_name}</option>
	</term>
	<listitem>
	  <para>
	    Access variable name from the current device - e.g. device on which
	    script is run. Given that script is run on device C0, the
	    <emphasis>.average</emphasis> is equal to <emphasis>C0.average</emphasis>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term>
	  <option>{device_name}.{variable_name}</option>
	</term>
	<listitem>
	  <para>
	    Access variable from any device present in the system. If device or
	    variable cannot be found, script is ended and target execution is
	    blocked for the device whose script failed.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
    <refsect2>
      <title>Array indexing</title>
      <para>
	Arrays values can be indexed simirarly to Python. Numbers, : and , are
	allowed for array indexing. Array index must stars with [ and ends with
	]. Array indexes starts from 1 - e.g. first member has index 1, last
        has index equal to array size. Please see example section for some exampls.
      </para>
    </refsect2>
  <refsect1>
    <title>EXAMPLES</title>

    <para>
      This script will call external script, which will hadle all communication. It will start exposure
      on camera, change filter and telescope offsets, and move image to given
      expand path. Then it asks for infotime variable, current sun azimuth and
      creates (or updates) test_double variable.
    </para>

    <para>exe /home/user/bin/test.sh</para>

    <para>
      And this is the executable.
    </para>

    <literallayout>
#!/bin/bash

for x in 1 2; do
	echo "value exposure = $x"
	echo "exposure"
	read exp_end
	echo "V W0 filter += 1"
	echo "V T0 WOFFS += 0.01 0.01"
	read x y
	# if the script does not specify what to do with the image, the image will be deleted!
	echo "rename $y %b/test/%f"
	read renamed
	echo "log E renamed $y to $renamed"
	# this will store image, no rename is needed
	echo "exposure_wfn %b/test/%f"
	read exp_end
	read x y
	echo "log I image %y"
	echo "? infotime"
	read x
	echo "G centrald sun_az"
	read y
	echo 'double test_double "[AU] double test value" 6.721'
	sleep 5
done
    </literallayout>

    <para>
      The following script will take 10 5 seconds randomly ditthered observations (in range of 8 arcseconds):
    </para>

    <para>for 10 { TX.OFFS=(rand(-8s,8s),rand(-8s,8s)) E 5 }</para>

    <para>
      The following script will run <emphasis>exe .. E 10</emphasis> part only
      once, when the target script is first observed. If target is changed, the
      <emphasis>once</emphasis> part will be run again.
    </para>

    <para>once { exe .. E 10 } E 20 E 30</para>

    <para>
      Following script can be used for finding focus position. It moves focuser
      50 steps backwards. Then it starts a sequence of 10 5 seconds exposures,
      moving focuser position forward by 10 steps after each exposure.
    </para>

    <para>focpos-=50 for 10 { E 5 focpos+=10 }</para>

    <para>
      This script test how various SPL_MODE affect resulting image. Sequence
      of 1, 5 and 10 seconds exposures is taken, then SPL_MODE variable is
      increased by 1.
    </para>

    <para>for 3 { E 1 E 5 E 10 SPL_MODE+=1 }</para>

    <para>
      Script bellow tests various gain and SPL_MODE settings.
    </para>

    <para>for 3 { GAIN=0 for 10 { E 1 GAIN+=1 } SPL_MODE+=1 }</para>

    <para>GAIN=20 for 3 { E 1 GAIN-=1 }</para>

    <para>SD.waitfor MODE 2 0 sleep 10 E 1</para>

    <para>for 10 { E 10 T0.OFFS+=(0,0.01) }</para>

    <para>
      Script bellow takes sequence of 10 and 20 seconds exposures in 10
      filters, starting form filter named C.
    </para>

    <para>filter=C for 10 { E 10 E 20 filter+=1 }</para>

    <para>
      Following scripts are equal, both take 5 20 seconds exposures in i filter.
    </para>

    <para>filter=i for 5 { E 20 }</para>

    <para>filter=i E 20 E 20 E 20 E 20 E 20</para>

    <para>SEQUENCE i 5 20</para>

    <para>
      Set full boolean array to false.
    </para>

    <para>for 10 { E 10 S1.bools[1:2,2:]=0 }</para>

    <para>
      This is a simple example of the flat fielding script. It changes camera
      to readout a small window. Then it takes 1 seconds, wait for finish of
      readout, and check average value of the camera. If the average is bellow
      or equal to 2000, script carry on - switch back to full frame mode, and
      do 1 seconds exposures until average value is above 2000.
    </para>

    <para>WINDOW=(10,10,20,20) do 200 { E 1 wait_idle } while (.average > 2000) WINDOW=(-1,-1,-1,-1) do 200 { E 1 wait_idle } while (.average > 1000)</para>

    <para>
      Call command with arguments 5 and 1.
    </para>

    <para>cmd apply(5,1)</para>

  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>

    <para>
      <citerefentry>
        <refentrytitle>rts2</refentrytitle>
	<manvolnum>7</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>rts2-target</refentrytitle>
	<manvolnum>1</manvolnum>
      </citerefentry>
    </para>

  </refsect1>
</refentry>
