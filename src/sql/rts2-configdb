#!/bin/bash

# Configuration file read routines.
# Copyright (C) 2010 Petr Kubanek, Institute of Physics <kubanek@fzu.cz>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

function print_help
{
  cat << EOF
Add telescope, camera or filters to the database.

Usage:
To add camera C0 to stars database:
  rts2-configdb stars -c C0

Options:
  -h         .. this help
  -t <name>  .. add telescope to the database
  -c <name>  .. add camera to the database
  -f <name>  .. add filter to the database
  --testdb   .. fill database for tests

Options must be folowed by name of an existing database, which has basic structure build with rts2-builddb.

EOF
}

if [ "x$1" == "x-h" -o "x$1" == "x--help" ]; then
  print_help
  exit 0
fi

DBNAME=$1
shift

if [ "x$DBNAME" == "x" ]; then
  print "You need to specify database name as the first argument."
  print_help
  exit 0
fi

PSQL=psql

PSQLDB="$PSQL $DBNAME"

# test database connection

$PSQLDB -c 'select * from cameras' 2>&1 >/dev/null
if [ $? -ne 0 ]; then
  echo "Cannot connect to dabase $DBNAME. Did you specify database as the first name? What does 'psql $DBNAME' do? Does it hits any bells? If not, please send full program output to <petr@kubanek.net>."
  exit 0
fi

function test_empty
{
  if [ "$1" == "x" ]; then
    echo "Empty argument."
    exit 2
  fi
}

LOGFILE="/tmp/config_$DBNAME.log"

echo "Logs generated in $LOGFILE"

function run_psql
{
  echo -n $1 " ."
  echo "running $PSQLDB -c \"$2\"" >> $LOGFILE
  $PSQLDB --echo-all -c "$2" 2>> $LOGFILE|while read x; do echo -n "."; done
  if [ $? -eq 0 ]; then
    echo " OK"
  else
    echo " failed"
  fi
}

while [ "x$1" != "x" ]; do
  case $1 in
    -h)
      print_help
      exit 0
      ;;
    -t)
      shift
      tel=$1
      test_empty "x$tel"
      run_psql "Adding telescope $tel" "insert into mounts values ('$tel',NULL,NULL,NULL,'$tel inserted from rts2-configdb');"
      ;;
    -c)
      shift
      cam=$1
      test_empty "x$cam"
      run_psql "Adding camera $cam" "insert into cameras values ('$cam','$cam inserted from rts2-configdb');"
      ;;
    -f)
      shift
      fil=$1
      test_empty "x$fil"
      run_psql "Adding filter $fil" "insert into filters (filter_id,offset_ra,offset_dec,standart_name,medium_wl,width) values (nextval('filter_id'),NULL,NULL,'$fil',NULL,NULL);"
      ;;
    --testdb)
      run_psql "Adding telescope T0" "insert into mounts values ('T0',NULL,NULL,NULL,'T0 inserted from rts2-configdb');"
      run_psql "Adding camera C0" "insert into cameras values ('C0','C0 inserted from rts2-configdb');"
      for f in UNK AA B C D E V R I; do
      	run_psql "Adding filter $f" "insert into filters values ('$f',NULL,NULL,'$f','$f inserted from rts2-configdb',NULL,NULL);"
      done
      ;;
    *)
      echo "unknow argument $1"
      exit 1
      ;;
  esac
  shift
done
